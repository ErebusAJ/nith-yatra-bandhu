// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: queries_users.sql

package db

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM users
WHERE id=$1
`

func (q *Queries) DeleteUser(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteUser, id)
	return err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT id, email, password_hash, access_level FROM users
WHERE email=$1
`

type GetUserByEmailRow struct {
	ID           uuid.UUID
	Email        string
	PasswordHash string
	AccessLevel  sql.NullString
}

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (GetUserByEmailRow, error) {
	row := q.db.QueryRowContext(ctx, getUserByEmail, email)
	var i GetUserByEmailRow
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.PasswordHash,
		&i.AccessLevel,
	)
	return i, err
}

const getUserByID = `-- name: GetUserByID :one
SELECT id, name, age, phone_number, email, password_hash, token_version, access_level, verified_status, created_at, updated_at, last_logged_in FROM users
WHERE id=$1
`

func (q *Queries) GetUserByID(ctx context.Context, id uuid.UUID) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByID, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Age,
		&i.PhoneNumber,
		&i.Email,
		&i.PasswordHash,
		&i.TokenVersion,
		&i.AccessLevel,
		&i.VerifiedStatus,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.LastLoggedIn,
	)
	return i, err
}

const getUsers = `-- name: GetUsers :many
SELECT id, name, age, phone_number, email, password_hash, token_version, access_level, verified_status, created_at, updated_at, last_logged_in FROM users
`

func (q *Queries) GetUsers(ctx context.Context) ([]User, error) {
	rows, err := q.db.QueryContext(ctx, getUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Age,
			&i.PhoneNumber,
			&i.Email,
			&i.PasswordHash,
			&i.TokenVersion,
			&i.AccessLevel,
			&i.VerifiedStatus,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.LastLoggedIn,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const registerUser = `-- name: RegisterUser :exec
INSERT INTO users(name, age, phone_number, email, password_hash)
VALUES ($1, $2, $3, $4, $5)
`

type RegisterUserParams struct {
	Name         string
	Age          int32
	PhoneNumber  string
	Email        string
	PasswordHash string
}

func (q *Queries) RegisterUser(ctx context.Context, arg RegisterUserParams) error {
	_, err := q.db.ExecContext(ctx, registerUser,
		arg.Name,
		arg.Age,
		arg.PhoneNumber,
		arg.Email,
		arg.PasswordHash,
	)
	return err
}

const updateUser = `-- name: UpdateUser :exec
UPDATE users
SET name=$1, password_hash=$2, phone_number=$3, updated_at=CURRENT_TIMESTAMP
WHERE id=$4
`

type UpdateUserParams struct {
	Name         string
	PasswordHash string
	PhoneNumber  string
	ID           uuid.UUID
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) error {
	_, err := q.db.ExecContext(ctx, updateUser,
		arg.Name,
		arg.PasswordHash,
		arg.PhoneNumber,
		arg.ID,
	)
	return err
}
