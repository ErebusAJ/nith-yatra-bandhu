// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: queries_travel_groups.sql

package db

import (
	"context"

	"github.com/google/uuid"
)

const addUserToGroup = `-- name: AddUserToGroup :exec
INSERT INTO travel_groups_members(group_id, user_id)
VALUES($1, $2)
`

type AddUserToGroupParams struct {
	GroupID uuid.UUID
	UserID  uuid.UUID
}

func (q *Queries) AddUserToGroup(ctx context.Context, arg AddUserToGroupParams) error {
	_, err := q.db.ExecContext(ctx, addUserToGroup, arg.GroupID, arg.UserID)
	return err
}

const createGroup = `-- name: CreateGroup :exec
INSERT INTO travel_groups(id, creator_id, name, description, plan_id)
VALUES($1, $2, $3, $4, $5)
`

type CreateGroupParams struct {
	ID          uuid.UUID
	CreatorID   uuid.UUID
	Name        string
	Description string
	PlanID      uuid.UUID
}

func (q *Queries) CreateGroup(ctx context.Context, arg CreateGroupParams) error {
	_, err := q.db.ExecContext(ctx, createGroup,
		arg.ID,
		arg.CreatorID,
		arg.Name,
		arg.Description,
		arg.PlanID,
	)
	return err
}

const deleteGroupByID = `-- name: DeleteGroupByID :exec
DELETE FROM travel_groups
WHERE id=$1
`

func (q *Queries) DeleteGroupByID(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteGroupByID, id)
	return err
}

const deleteUserFromGroup = `-- name: DeleteUserFromGroup :exec
DELETE FROM travel_groups_members
WHERE user_id=$1 AND group_id=$2
`

type DeleteUserFromGroupParams struct {
	UserID  uuid.UUID
	GroupID uuid.UUID
}

func (q *Queries) DeleteUserFromGroup(ctx context.Context, arg DeleteUserFromGroupParams) error {
	_, err := q.db.ExecContext(ctx, deleteUserFromGroup, arg.UserID, arg.GroupID)
	return err
}

const getGroupByID = `-- name: GetGroupByID :one
SELECT id, creator_id, name, description, plan_id, created_at, updated_at FROM travel_groups
WHERE id=$1
`

func (q *Queries) GetGroupByID(ctx context.Context, id uuid.UUID) (TravelGroup, error) {
	row := q.db.QueryRowContext(ctx, getGroupByID, id)
	var i TravelGroup
	err := row.Scan(
		&i.ID,
		&i.CreatorID,
		&i.Name,
		&i.Description,
		&i.PlanID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getGroupUsersDetails = `-- name: GetGroupUsersDetails :many
SELECT u.id, u.name, u.age, u.phone_number, u.email
FROM users u
INNER JOIN travel_groups_members ON travel_groups_members.user_id = u.id
WHERE travel_groups_members.group_id=$1
`

type GetGroupUsersDetailsRow struct {
	ID          uuid.UUID
	Name        string
	Age         int32
	PhoneNumber string
	Email       string
}

func (q *Queries) GetGroupUsersDetails(ctx context.Context, groupID uuid.UUID) ([]GetGroupUsersDetailsRow, error) {
	rows, err := q.db.QueryContext(ctx, getGroupUsersDetails, groupID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetGroupUsersDetailsRow
	for rows.Next() {
		var i GetGroupUsersDetailsRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Age,
			&i.PhoneNumber,
			&i.Email,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUserGroups = `-- name: GetUserGroups :many
SELECT g.id, g.creator_id, g.name, g.description, g.plan_id  FROM travel_groups g
INNER JOIN travel_groups_members t ON t.group_id = g.id
WHERE t.user_id=$1
`

type GetUserGroupsRow struct {
	ID          uuid.UUID
	CreatorID   uuid.UUID
	Name        string
	Description string
	PlanID      uuid.UUID
}

func (q *Queries) GetUserGroups(ctx context.Context, userID uuid.UUID) ([]GetUserGroupsRow, error) {
	rows, err := q.db.QueryContext(ctx, getUserGroups, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetUserGroupsRow
	for rows.Next() {
		var i GetUserGroupsRow
		if err := rows.Scan(
			&i.ID,
			&i.CreatorID,
			&i.Name,
			&i.Description,
			&i.PlanID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateGroupByID = `-- name: UpdateGroupByID :exec
UPDATE travel_groups
SET name=$1, description=$2, updated_at=CURRENT_TIMESTAMP
WHERE id=$3
`

type UpdateGroupByIDParams struct {
	Name        string
	Description string
	ID          uuid.UUID
}

func (q *Queries) UpdateGroupByID(ctx context.Context, arg UpdateGroupByIDParams) error {
	_, err := q.db.ExecContext(ctx, updateGroupByID, arg.Name, arg.Description, arg.ID)
	return err
}
