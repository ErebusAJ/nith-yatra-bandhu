// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: queries_travel_groups_requests.sql

package db

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const getUserGroupRequests = `-- name: GetUserGroupRequests :many
SELECT r.id AS request_id, r.group_id, g.name, u.id AS sender_id, u.name AS sender_name, r.status, r.created_at
FROM travel_groups_requests as r
JOIN travel_groups g ON r.group_id = g.id
JOIN users u ON r.user_id = u.id
WHERE g.creator_id =$1
AND r.status = 'pending'
ORDER BY r.created_at DESC
`

type GetUserGroupRequestsRow struct {
	RequestID  uuid.UUID
	GroupID    uuid.UUID
	Name       string
	SenderID   uuid.UUID
	SenderName string
	Status     string
	CreatedAt  sql.NullTime
}

func (q *Queries) GetUserGroupRequests(ctx context.Context, creatorID uuid.UUID) ([]GetUserGroupRequestsRow, error) {
	rows, err := q.db.QueryContext(ctx, getUserGroupRequests, creatorID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetUserGroupRequestsRow
	for rows.Next() {
		var i GetUserGroupRequestsRow
		if err := rows.Scan(
			&i.RequestID,
			&i.GroupID,
			&i.Name,
			&i.SenderID,
			&i.SenderName,
			&i.Status,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const rejectRequest = `-- name: RejectRequest :exec
DELETE FROM travel_groups_requests
WHERE group_id=$1 AND user_id=$2
`

type RejectRequestParams struct {
	GroupID uuid.UUID
	UserID  uuid.UUID
}

func (q *Queries) RejectRequest(ctx context.Context, arg RejectRequestParams) error {
	_, err := q.db.ExecContext(ctx, rejectRequest, arg.GroupID, arg.UserID)
	return err
}

const sendRequest = `-- name: SendRequest :exec
INSERT INTO travel_groups_requests(group_id, user_id)
VALUES($1, $2)
`

type SendRequestParams struct {
	GroupID uuid.UUID
	UserID  uuid.UUID
}

func (q *Queries) SendRequest(ctx context.Context, arg SendRequestParams) error {
	_, err := q.db.ExecContext(ctx, sendRequest, arg.GroupID, arg.UserID)
	return err
}

const updateRequest = `-- name: UpdateRequest :exec
UPDATE travel_groups_requests
SET status=$1
WHERE group_id=$2 AND user_id=$3
`

type UpdateRequestParams struct {
	Status  string
	GroupID uuid.UUID
	UserID  uuid.UUID
}

func (q *Queries) UpdateRequest(ctx context.Context, arg UpdateRequestParams) error {
	_, err := q.db.ExecContext(ctx, updateRequest, arg.Status, arg.GroupID, arg.UserID)
	return err
}
